{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HW6 - Insurance Surplus","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMpXUFXpcGHj0I/MG8u6RQr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"kOckoNGBc6uD"},"source":["# Nguyen Minh Quan - MAMAIU19036\n","# Random Processes, Homework 6\n","# Simulation - Insurance Surplus\n","# October 27, 2021"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mbcvg5QX4Pvk"},"source":["Recall that if $\\left\\{W_n\\right\\}_{n\\in\\mathbb{N}}$ are independent, identically distributed random variables of some distribution $F$ and are independent of a Poisson process $\\left\\{N_t\\right\\}$ with rate $\\lambda>0,$ then the process $\\left\\{R_t\\right\\}_{t\\geq0}$ defined by\n","$$R_t=\\sum_{i=1}^{N_t}W_i$$\n","is called a **compound Poisson process**.\n","Consider an insurance surplus model on a compound Poisson process $\\left\\{R_t\\right\\}$ defined by\n","$$U_t=x+ct-R_t,\\forall t\\geq0.$$\n","We attempt to simulate this model on the time horizon $[0,10]$ with $x=10,c=1,\\lambda=2$ and $W_i\\sim Exp(1).$"]},{"cell_type":"code","metadata":{"id":"km6FVv5Y2QTz"},"source":["# Import Libraries\n","import math\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5xckRr7O1za9"},"source":["# Generate Insurance Surplus Model\n","def insurance_surplus(arrival_rate, time, jump_rate,\n","                      premium_rate, initial_surplus):\n","    arrivals = np.random.poisson(arrival_rate * time)\n","    S_n, R_t = [0], (2 * arrivals + 1) * [0]\n","    if (arrivals > 0):\n","        U_i = list(np.random.uniform(0, time, arrivals))\n","        U_j = [U_i[i] - 0.0001 for i in range(len(U_i))]\n","        U_i.extend(U_j)\n","        U_i.sort()\n","        S_n.extend(U_i)\n","        W_i = np.random.exponential(1 / jump_rate, arrivals)\n","        for i in range(1, arrivals + 1): R_t[2 * i] = W_i[i - 1]\n","        R_t = np.cumsum(R_t)\n","        x = len(R_t) * [initial_surplus]\n","        ct = [S_n[i] * premium_rate for i in range(len(S_n))]\n","        U_t = [x[i] + ct[i] - R_t[i] for i in range(len(x))]\n","        for i in range(len(U_t)):\n","            if (U_t[i] < 0): # ruin\n","                for j in range(i, len(U_t)): U_t[j] = 0\n","    else:\n","        S_n = [0, time]\n","        x = 2 * [initial_surplus]\n","        ct = S_n * premium_rate \n","        U_t = [x[i] + ct[i] for i in range(len(x))]\n","    plt.plot(S_n, U_t)\n","    plt.xlabel('Time')\n","    plt.ylabel('Insurance Surplus')\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"TXjLSjP1BSzR","executionInfo":{"status":"ok","timestamp":1635347064229,"user_tz":-420,"elapsed":11,"user":{"displayName":"Quan Nguyen","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11096386105956491339"}},"outputId":"d9ed81c1-69d5-4557-e55d-05a9f639f507"},"source":["# Plotting Sample Path\n","arrival_rate, jump_rate, premium_rate = 2, 1, 1\n","time, initial_surplus = 10, 10\n","insurance_surplus(arrival_rate, time, jump_rate,\n","                  premium_rate, initial_surplus)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WZWYRPVNJwfj"},"source":["# Simulate Ruin Scenario\n","def insurance_surplus_ruin(arrival_rate, time, jump_rate,\n","                           premium_rate, initial_surplus):\n","    arrivals = np.random.poisson(arrival_rate * time)\n","    S_n, R_t = [0], (2 * arrivals + 1) * [0]\n","    if (arrivals > 0):\n","        U_i = list(np.random.uniform(0, time, arrivals))\n","        U_j = [U_i[i] - 0.0001 for i in range(len(U_i))]\n","        U_i.extend(U_j)\n","        U_i.sort()\n","        S_n.extend(U_i)\n","        W_i = np.random.exponential(1 / jump_rate, arrivals)\n","        for i in range(1, arrivals + 1): R_t[2 * i] = W_i[i - 1]\n","        R_t = np.cumsum(R_t)\n","        x = len(R_t) * [initial_surplus]\n","        ct = [S_n[i] * premium_rate for i in range(len(S_n))]\n","        U_t = [x[i] + ct[i] - R_t[i] for i in range(len(x))]\n","        for i in range(len(U_t)):\n","            if (U_t[i] < 0): return 0 # ruin\n","        return 1 # not ruin\n","    else: return 1 # no claim = not ruin\n","\n","# Simulate Multiple Scenarios\n","def sample_ruin(sample_size, parameters):\n","    arrival_rate, jump_rate = parameters[0], parameters[2]\n","    time = parameters[1]\n","    premium_rate, initial_surplus = parameters[3], parameters[4]\n","    S = [0] * sample_size\n","    for i in range(0, sample_size):\n","        S[i] = insurance_surplus_ruin(arrival_rate, time, jump_rate,\n","                                      premium_rate, initial_surplus)\n","    return S"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"31dyhRELLM3d","executionInfo":{"status":"ok","timestamp":1635347065403,"user_tz":-420,"elapsed":1182,"user":{"displayName":"Quan Nguyen","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11096386105956491339"}},"outputId":"d958f0a5-8fb2-4a87-a78d-b8ac5e57820d"},"source":["# Approximate Ruin Probability\n","parameters = [2, 10, 1, 1, 10]\n","sample_size = int(math.pow(10, 4))\n","sample_data = sample_ruin(sample_size, parameters)\n","print('Approximation of Ruin Probability:',\n","      \"{:.4f}\".format(1 - sum(sample_data) / len(sample_data)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Approximation of Ruin Probability: 0.5309\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7TFZ0jcqMFCm","executionInfo":{"status":"ok","timestamp":1635347148353,"user_tz":-420,"elapsed":6682,"user":{"displayName":"Quan Nguyen","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11096386105956491339"}},"outputId":"d5a353bd-10d5-41f8-e7ee-62ae7881ed3d"},"source":["# Find Premium Rate for Low Ruin Probability\n","ruin_probability, premium_rate = 1, 0\n","while (ruin_probability > 0.001):\n","    premium_rate += 1\n","    parameters = [2, 10, 1, premium_rate, 10]\n","    sample_size = int(math.pow(10, 4))\n","    sample_data = sample_ruin(sample_size, parameters)\n","    ruin_probability = 1 - sum(sample_data) / len(sample_data)\n","    print('Ruin Probability with Premium Rate', premium_rate, end = '')\n","    print(':', \"{:.4f}\".format(ruin_probability))\n","print('Ideal Premium Rate:', premium_rate)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Ruin Probability with Premium Rate 1: 0.5241\n","Ruin Probability with Premium Rate 2: 0.1262\n","Ruin Probability with Premium Rate 3: 0.0166\n","Ruin Probability with Premium Rate 4: 0.0034\n","Ruin Probability with Premium Rate 5: 0.0008\n","Ideal Premium Rate: 5\n"]}]},{"cell_type":"markdown","metadata":{"id":"7LMC0azr2xHM"},"source":["End of Simulation."]}]}